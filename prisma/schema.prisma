generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles
enum UserRole {
  SUPER_ADMIN
  ADMIN
  TEAM_MEMBER
}

// Enum for frequency of tasks
enum Frequency {
  D // Daily
  W // Weekly
  M // Monthly
  Y // Yearly
  Q // Quarterly
  F // Fortnightly
  E1ST // First occurrence in a cycle
  E2ND // Second occurrence in a cycle
  E3RD // Third occurrence in a cycle
  E4TH // Fourth occurrence in a cycle
  ELAST // Last occurrence in a cycle
}

// Enum for priority levels
enum Priority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

// Enum for departments
enum Department {
  ACCOUNTS
  MDO
  S_T
  PM
  MD
  MANAGER_HO
  COORDINATOR_HO
  OHE
  MARKETING_TENDER
  HR
  CA
  BILLING_ENGINEER
  SURVEYER_DEPARTMENT
  OTHERS
  OFFICE_EXECUTIVES
  PURCHASE
  QC_ENGINEER
}

model User {
  id                 String   @id @default(uuid())
  name               String
  username           String   @unique
  email              String   @unique
  phoneNumber        String?  @map("phone_number")
  password           String
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  isActive           Boolean  @default(true) @map("is_active")
  role               UserRole @default(TEAM_MEMBER) // Assigning default role as TEAM_MEMBER
  avatarUrl          String?  @map("avatar_url") // URL of the uploaded avatar
  avatarPublicId     String?  @map("avatar_public_id") // Cloudinary public_id for easier management
  refreshToken       String? // Optional refresh token
  forcePasswordReset Boolean  @default(false)

  @@map("users")
}

model TaskDetail {
  id           Int        @id @default(autoincrement())
  taskCode     String     @unique
  name         String     @unique
  description  String
  frequency    Frequency // Enum for frequency
  dependencies Json?
  department   Department // Enum for department
  createdBy    String
  updatedBy    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  assignedTasks AssignedTask[]
}

model AssignedTask {
  id                  Int       @id @default(autoincrement())
  doerName            String
  email               String
  actualDate          DateTime?
  estimatedDuration   Int?
  status              String
  priority            Priority // Enum for priority
  emailForBuddySystem String
  buddyEmail          String
  assignmentDate      DateTime  @default(now())
  deadline            DateTime?
  completionNotes     String?
  progress            Int?
  reviewerEmail       String?
  isUrgent            Boolean   @default(false) // Flag for marking urgent tasks

  taskDetailId Int
  taskDetail   TaskDetail @relation(fields: [taskDetailId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
}
